lex
  match  LEX_CLOSE      '/lex'
  match  LEX_OPEN       /^lex\s+/
  match  MATCH          /^match\s+/
  match  IGNORE         'ignore'
  match  COLON          ':'
  match  SEMICOLON      ';'
  match  PIPE_ARROW     '|>'
  match  PIPE           '|'
  match  POPEN          '('
  match  PCLOSE         ')'
  match  QUESTION_MARK  '?'
  match  PLUS           '+'
  match  TIMES          '*'
  match  REGEX_MATCHER  {^/[^/]*/}
  match  REGEX_MATCHER  /^{[^}]*}/
  match  CODE           /^'[^']*'/
  match  CODE           /^"[^"]*"/
  match  NAME           /^[a-zA-Z][a-zA-Z0-9_-]*/
  ignore WHITESPACE     /^\s+/
/lex

token-action
  | :MATCH 'return $1.trim()'
  | :IGNORE
  ;

token-matcher
  | :CODE
  |> 'return { type: "TOKEN_MATCHER", match: $1.substring(1, $1.length - 1) }'
  | :REGEX_MATCHER
  |> 'return { type: "TOKEN_REGEX_MATCHER", regex: $1.substring(1, $1.length - 1) }'
  ;

token-definition
  | (token-action as :action) then (:NAME as :name) then (token-matcher as :matcher)
  |> 'return { type: "TOKEN_DEFINITION", name: $.name, matcher: $.matcher, action: $.action }'
  ;

lexer
  | :LEX_OPEN then (*token-definition as :tokens) then :LEX_CLOSE 'return { type: "LEXER", tokens: $.tokens }'
  ;

parser-name
  | :POPEN then (rule-expression as :expr) then :PCLOSE
  |> 'return $.expr'
  | :QUESTION_MARK then (parser-name as :arg)
  |> 'return { type: "UNARY_CALL", parser: "opt", arg: $.arg }'
  | :PLUS then (parser-name as :arg)
  |> 'return { type: "UNARY_CALL", parser: "many1", arg: $.arg }'
  | :TIMES then (parser-name as :arg)
  |> 'return { type: "UNARY_CALL", parser: "many0", arg: $.arg }'
  | :COLON then (parser-name as :arg)
  |> 'return { type: "UNARY_CALL", parser: "token", arg: $.arg }'
  | :NAME
  |> 'return { type: "RULE_CALL", name: $1 }'
  ;

rule-expression
  | (parser-name as :lhs) then (:NAME as :parser) then (rule-expression as :rhs)
  |> 'return { type: "BINARY_CALL", parser: $.parser, lhs: $.lhs, rhs: $.rhs }'
  | (:NAME as :name) then (rule-expression as :arg)
  |> 'return { type: "UNARY_CALL", parser: $.name, arg: $.arg }'
  | parser-name
  ;

rule-eval
  | ?:PIPE_ARROW then (:CODE as :code) 'return $.code.substring(1, $.code.length - 1)'
  ;

rule-definition
  | :PIPE then (rule-expression as :expr) then ?(rule-eval as :code)
  |> 'let code = $.code, expr = $.expr; code ? expr.code = code : null; return expr'
  ;

rule
  | (:NAME as :name) then (+rule-definition as :definitions) then :SEMICOLON
  |> 'return { type: "RULE", name: $.name, definitions: $.definitions }'
  ;

rules
  | *rule
  ;

start
  | (lexer as :lexer) then (rules as :rules) 'return [$.lexer].concat($.rules)'
  | rules
  ;

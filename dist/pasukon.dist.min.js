!function e(t,r,n){function s(i,o){if(!r[i]){if(!t[i]){var c="function"==typeof require&&require;if(!o&&c)return c(i,!0);if(a)return a(i,!0);var h=new Error("Cannot find module '"+i+"'");throw h.code="MODULE_NOT_FOUND",h}var p=r[i]={exports:{}};t[i][0].call(p.exports,(function(e){return s(t[i][1][e]||e)}),p,p.exports,e,t,r,n)}return r[i].exports}for(var a="function"==typeof require&&require,i=0;i<n.length;i++)s(n[i]);return s}({1:[function(e,t,r){window.Pasukon=e("./pasukon")},{"./pasukon":20}],2:[function(e,t,r){t.exports=[{type:"LEXER",tokens:[{type:"TOKEN_DEFINITION",name:"LEX_CLOSE",matcher:{type:"TOKEN_MATCHER",match:"/lex"},action:"match"},{type:"TOKEN_DEFINITION",name:"LEX_OPEN",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^lex\s+/},action:"match"},{type:"TOKEN_DEFINITION",name:"MATCH",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^match\s+/},action:"match"},{type:"TOKEN_DEFINITION",name:"IGNORE",matcher:{type:"TOKEN_MATCHER",match:"ignore"},action:"match"},{type:"TOKEN_DEFINITION",name:"COLON",matcher:{type:"TOKEN_MATCHER",match:":"},action:"match"},{type:"TOKEN_DEFINITION",name:"SEMICOLON",matcher:{type:"TOKEN_MATCHER",match:";"},action:"match"},{type:"TOKEN_DEFINITION",name:"PIPE_ARROW",matcher:{type:"TOKEN_MATCHER",match:"|>"},action:"match"},{type:"TOKEN_DEFINITION",name:"PIPE",matcher:{type:"TOKEN_MATCHER",match:"|"},action:"match"},{type:"TOKEN_DEFINITION",name:"POPEN",matcher:{type:"TOKEN_MATCHER",match:"("},action:"match"},{type:"TOKEN_DEFINITION",name:"PCLOSE",matcher:{type:"TOKEN_MATCHER",match:")"},action:"match"},{type:"TOKEN_DEFINITION",name:"QUESTION_MARK",matcher:{type:"TOKEN_MATCHER",match:"?"},action:"match"},{type:"TOKEN_DEFINITION",name:"PLUS",matcher:{type:"TOKEN_MATCHER",match:"+"},action:"match"},{type:"TOKEN_DEFINITION",name:"TIMES",matcher:{type:"TOKEN_MATCHER",match:"*"},action:"match"},{type:"TOKEN_DEFINITION",name:"REGEX_MATCHER",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^\/[^\/]*\//},action:"match"},{type:"TOKEN_DEFINITION",name:"REGEX_MATCHER",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^{[^}]*}/},action:"match"},{type:"TOKEN_DEFINITION",name:"CODE",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^'[^']*'/},action:"match"},{type:"TOKEN_DEFINITION",name:"CODE",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^\"[^\"]*\"/},action:"match"},{type:"TOKEN_DEFINITION",name:"NAME",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^[a-zA-Z][a-zA-Z0-9_-]*/},action:"match"},{type:"TOKEN_DEFINITION",name:"WHITESPACE",matcher:{type:"TOKEN_REGEX_MATCHER",regex:/^\s+/},action:"ignore"}]},{type:"RULE",name:"token-action",definitions:[{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"MATCH"},code:function(e,t,r,n){return e.trim()}},{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"IGNORE"}}]},{type:"RULE",name:"token-matcher",definitions:[{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"CODE"},code:function(e,t,r,n){return{type:"TOKEN_MATCHER",match:e.substring(1,e.length-1)}}},{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"REGEX_MATCHER"},code:function(e,t,r,n){return{type:"TOKEN_REGEX_MATCHER",regex:e.substring(1,e.length-1)}}}]},{type:"RULE",name:"token-definition",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"token-action"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"action"}}},rhs:{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"NAME"}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"name"}}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"token-matcher"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"matcher"}}}},code:function(e,t,r,n){return{type:"TOKEN_DEFINITION",name:r.name,matcher:r.matcher,action:r.action}}}]},{type:"RULE",name:"lexer",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"LEX_OPEN"}},rhs:{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"UNARY_CALL",parser:"many0",arg:{type:"RULE_CALL",name:"token-definition"}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"tokens"}}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"LEX_CLOSE"}}},code:function(e,t,r,n){return{type:"LEXER",tokens:r.tokens}}}]},{type:"RULE",name:"parser-name",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"POPEN"}},rhs:{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"rule-expression"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"expr"}}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"PCLOSE"}}},code:function(e,t,r,n){return r.expr}},{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"QUESTION_MARK"}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"parser-name"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"arg"}}},code:function(e,t,r,n){return{type:"UNARY_CALL",parser:"opt",arg:r.arg}}},{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"PLUS"}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"parser-name"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"arg"}}},code:function(e,t,r,n){return{type:"UNARY_CALL",parser:"many1",arg:r.arg}}},{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"TIMES"}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"parser-name"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"arg"}}},code:function(e,t,r,n){return{type:"UNARY_CALL",parser:"many0",arg:r.arg}}},{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"COLON"}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"parser-name"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"arg"}}},code:function(e,t,r,n){return{type:"UNARY_CALL",parser:"token",arg:r.arg}}},{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"NAME"},code:function(e,t,r,n){return{type:"RULE_CALL",name:e}}}]},{type:"RULE",name:"rule-expression",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"parser-name"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"lhs"}}},rhs:{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"NAME"}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"parser"}}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"rule-expression"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"rhs"}}}},code:function(e,t,r,n){return{type:"BINARY_CALL",parser:r.parser,lhs:r.lhs,rhs:r.rhs}}},{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"NAME"}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"name"}}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"rule-expression"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"arg"}}},code:function(e,t,r,n){return{type:"UNARY_CALL",parser:r.name,arg:r.arg}}},{type:"RULE_CALL",name:"parser-name"}]},{type:"RULE",name:"rule-eval",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"opt",arg:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"PIPE_ARROW"}}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"CODE"}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"code"}}},code:function(e,t,r,n){return r.code.substring(1,r.code.length-1)}}]},{type:"RULE",name:"rule-definition",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"PIPE"}},rhs:{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"rule-expression"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"expr"}}},rhs:{type:"UNARY_CALL",parser:"opt",arg:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"rule-eval"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"code"}}}}},code:function(e,t,r,n){return r.code&&(r.expr.code=r.code),r.expr}}]},{type:"RULE",name:"rule",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"NAME"}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"name"}}},rhs:{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"UNARY_CALL",parser:"many1",arg:{type:"RULE_CALL",name:"rule-definition"}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"definitions"}}},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"SEMICOLON"}}},code:function(e,t,r,n){return{type:"RULE",name:r.name,definitions:r.definitions}}}]},{type:"RULE",name:"rules",definitions:[{type:"UNARY_CALL",parser:"many0",arg:{type:"RULE_CALL",name:"rule"}}]},{type:"RULE",name:"start",definitions:[{type:"BINARY_CALL",parser:"then",lhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"lexer"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"lexer"}}},rhs:{type:"BINARY_CALL",parser:"as",lhs:{type:"RULE_CALL",name:"rules"},rhs:{type:"UNARY_CALL",parser:"token",arg:{type:"RULE_CALL",name:"rules"}}},code:function(e,t,r,n){return[r.lexer].concat(r.rules)}},{type:"RULE_CALL",name:"rules"}]}]},{}],3:[function(e,t,r){const n=e("./token"),s={};t.exports=class{constructor(e){this.definitions=e,this.col=1,this.line=1}*lex(e){for(;""!==e;){const[t,r]=this.lexOne(e);if(null!==t&&(yield t),e===r)throw new Error(`Invalid token '${e[0]}' at line ${this.line}, column ${this.col}`);e=r}yield new n({name:"EOF",match:null,col:this.col,line:this.line})}lexOne(e){for(let t=0,r=this.definitions.length;t<r;t++){const r=this.definitions[t],a=r.matcher;if("TOKEN_MATCHER"===a.type){const t=a.match;if(e.substring(0,t.length)===t){const s="match"===r.action?new n({name:r.name,match:t,col:this.col,line:this.line}):null;return this.updatePosition(t),[s,e.substring(t.length)]}}else if("TOKEN_REGEX_MATCHER"===a.type){let t=r.matcher.regex;t="object"==typeof t?t:s[t]||(s[t]=new RegExp(t));const a=t.exec(e);if(null!==a&&0===a.index){const t="match"===r.action?new n({name:r.name,match:a[0],col:this.col,line:this.line}):null;return this.updatePosition(a[0]),[t,e.substring(a[0].length)]}}}return[null,e]}updatePosition(e){for(let t=0,r=e.length;t<r;t++)"\n"===e[t]?(this.line+=1,this.col=1):this.col+=1}}},{"./token":4}],4:[function(e,t,r){t.exports=class{constructor({name:e,match:t,line:r,col:n}){this.name=e,this.match=t,this.line=r||0,this.col=n||0}is(e){return this.name===e}}},{}],5:[function(e,t,r){const n=e("../evaluator");t.exports=class{constructor(e,t,r){if(void 0===e[1].tokenName)throw new Error("AS combinator only works with a token as the RHS: '(my-parser as :somename)'");this.lhs=e[0],this.name=e[1].tokenName,this.code=t,this.rule=r,this._cacheKey=null}parse(e){const t=this.lhs.parse(e).clone();return t.matched={name:this.name,value:t.matched},this.code&&(t.matched=n.eval(this.code,t.matched)),t}getParsers(){return[this.lhs]}toString(){return`[AS ${this.lhs} ${this.name}]`}}},{"../evaluator":13}],6:[function(e,t,r){const n=e("../result"),s=e("../evaluator");t.exports=class{constructor(e,t,r){this.getParser=e,this._parser=null,this.code=t,this.rule=r,this._cacheKey=null}parse(e){const t=this.parser.parse(e);return t.failed?n.fail(t.remaining,this.rule):(this.code&&(t.matched=s.eval(this.code,t.matched)),t)}getParsers(){return[this.parser]}get parser(){return null===this._parser&&(this._parser=this.getParser()),this._parser}toString(){return`[CALL RULE ${this.parser}]`}}},{"../evaluator":13,"../result":17}],7:[function(e,t,r){const n=e("../result"),s=e("../evaluator");t.exports=class{constructor(e,t,r){this.parser=e,this.code=t,this.rule=r,this._cacheKey=null}parse(e){if(e.isEmpty())return n.ok(e);let t=e,r=[];for(;!t.isEmpty();){const e=this.parser.parse(t);if(null!==e.matched&&(r=r.concat(e.matched)),e.failed)return n.ok(t,this.code?s.eval(this.code,r):r);t=e.remaining}}getParsers(){return[this.parser]}toString(){return`[MANY0 ${this.parser}]`}}},{"../evaluator":13,"../result":17}],8:[function(e,t,r){const n=e("../result"),s=e("../evaluator");t.exports=class{constructor(e,t,r){this.parser=e,this.code=t,this.rule=r,this._cacheKey=null}parse(e){if(e.isEmpty())return n.fail(e,this.rule);let t=e,r=[];for(;!t.isEmpty();){const a=this.parser.parse(t);if(null!==a.matched&&(r=r.concat(a.matched)),a.failed)return 0===r.length?n.fail(e,this.rule):n.ok(t,this.code?s.eval(this.code,r):r);t=a.remaining}}getParsers(){return[this.parser]}toString(){return`[MANY1 ${this.parser}]`}}},{"../evaluator":13,"../result":17}],9:[function(e,t,r){const n=e("../result"),s=e("../evaluator");t.exports=class{constructor(e,t,r){this.parser=e,this.code=t,this.rule=r,this._cacheKey=null}parse(e){const t=this.parser.parse(e),r=this.code?s.eval(this.code,t.matched):t.matched;return n.ok(t.remaining,r)}getParsers(){return[this.parser]}toString(){return`[OPTIONAL ${this.parser}]`}}},{"../evaluator":13,"../result":17}],10:[function(e,t,r){const n=e("../result"),s=e("../evaluator");t.exports=class{constructor(e,t,r){this.parsers=e,this.code=t,this.rule=r,this._cacheKey=null}parse(e){for(let t=0,r=this.parsers.length;t<r;t++){const r=this.parsers[t].parse(e);if(r.succeeded)return this.code&&(r.matched=s.eval(this.code,r.matched)),r}return n.fail(e,this.rule)}getParsers(){return this.parsers}toString(){return this.rule?`<RULE: ${this.rule}>`:`[OR ${this.parsers.map(e=>e.toString()).join(" ")}]`}}},{"../evaluator":13,"../result":17}],11:[function(e,t,r){const n=e("../result"),s=e("../evaluator");t.exports=class{constructor(e,t,r){this.lhs=e[0],this.rhs=e[1],this.code=t,this.rule=r,this._cacheKey=null}parse(e){const t=this.lhs.parse(e);if(t.failed)return t;const r=this.rhs.parse(t.remaining);return r.succeeded?(r.matched=this.code?s.eval(this.code,t.matched,r.matched):[t.matched,r.matched],r):n.fail(e,this.rule)}getParsers(){return[this.lhs,this.rhs]}toString(){return`[THEN ${this.lhs} ${this.rhs}]`}}},{"../evaluator":13,"../result":17}],12:[function(e,t,r){let n=0;class s{log(e){console.log(e)}}t.exports=class{constructor(e,t){this.parser=e,this.logger=t||new s}parse(e){this.log(`${this.indentation}${this.parser}: START`),this.indent();const t=this.parser.parse(e);return this.dedent(),this.log(`${this.indentation}${this.parser}: ${t.succeeded?"OK":"FAIL"}`),t}getParsers(){return this.parser.getParsers()}get cacheKey(){return this.parser.cacheKey}toString(){return this.parser.toString()}get tokenName(){return this.parser.tokenName}log(e){this.logger.log(e)}indent(){n+=2}dedent(){n-=2}get indentation(){return Array(n).fill(" ").join("")}}},{}],13:[function(e,t,r){const n=e("../util/flatten");let s={};t.exports={eval(e,t,r){if(!e)return null;const a={},i=n([t,r]);for(let e=0,t=i.length;e<t;e++){const t=i[e];t&&Object.prototype.hasOwnProperty.call(t,"name")&&(a[t.name]=t.value)}return"function"==typeof e?e(t,r,a,s):new Function("$1","$2","$","$ctx",e)(t,r,a,s)},setContext(e){s=e}}},{"../util/flatten":22}],14:[function(e,t,r){const n=e("./token-parser");t.exports=class{constructor(e){this.parsers=e}check(){Object.keys(this.parsers).forEach(e=>this.checkRuleForLeftRecursion(e,e,[]))}checkRuleForLeftRecursion(e,t,r){this.parsers[e].getParsers().forEach(s=>{const a=this.leftmostFor(s);if(!(a instanceof n)){if(r.push(e),a.rule===t)throw new Error(`Left recursion found: ${r.join(" -> ")} -> ${t}`);r.includes(a.rule)||this.checkRuleForLeftRecursion(a.rule,t,r)}})}leftmostFor(e){if(void 0===e)throw new Error("Could not find leftmost parser");return e instanceof n||void 0!==e.rule?e:this.leftmostFor(e.getParsers()[0])}}},{"./token-parser":19}],15:[function(e,t,r){let n={};t.exports=class{constructor(e,t){this.parser=e,this.cacheKey=t}static clear(){n={}}parse(e){const t=this.cacheKey^e.cacheKey;return n[t]||(n[t]=this.parser.parse(e))}getParsers(){return this.parser.getParsers()}toString(){return this.parser.toString()}get tokenName(){return this.parser.tokenName}}},{}],16:[function(e,t,r){const n=e("../lexer/lexer"),s=e("./token-list"),a=e("./token-parser"),i=e("./result"),o=e("./combinators/many0"),c=e("./combinators/many1"),h=e("./combinators/optional"),p=e("./combinators/or"),l=e("./combinators/then"),L=e("./combinators/identity"),u=e("./combinators/as"),m=e("./left-recursion-checker"),A=e("./memoizable-parser"),y=e("./debuggable-parser");const E={start:null,cache:!1,debug:!1,logger:null,lexer:null};t.exports=class{constructor(e,t={}){this.combinators={binary:{or:p,then:l,as:u},unary:{many0:o,many1:c,opt:h}},this.parsers={},this.options=Object.assign({},E,t),this.lexer=this.options.lexer||this.buildLexer(e[0]),"LEXER"===e[0].type&&(e=e.slice(1));const r=this.buildRules(e);if(this.start=this.options.start||r,null===this.start)throw new Error("No rules found");new m(this.parsers).check()}parse(e){this.options.cache&&A.clear(),i.clear();const t=this.parsers[this.start];if(!t)throw new Error(`Could not find starting parser: '${this.start}'`);return t.parse(new s(this.lexer.lex(e)))}getMostAdvancedFailure(){return i.getMostAdvancedFailure()}addBinaryCombinator(e,t){if(!/[a-zA-Z][a-zA-Z0-9_-]*/.test(e))throw new Error("Invalid name. It must start with a letter and only contain a-z, A-Z, 0-9, - and _.");return this.combinators.binary[e]=t,this}addUnaryCombinator(e,t){if(!/[a-zA-Z][a-zA-Z0-9_-]*/.test(e))throw new Error("Invalid name. It must start with a letter and only contain a-z, A-Z, 0-9, - and _.");return this.combinators.unary[e]=t,this}buildRules(e){let t=null;return e.forEach(e=>{const r=e.definitions.map(t=>this.parserFor(e.name,t));this.parsers[e.name]=this.decorate(new p(r,void 0,e.name),e),t=e.name}),t}parserFor(e,t){let r=null;return r="UNARY_CALL"===t.type?this.buildUnaryCall(e,t):"BINARY_CALL"===t.type?this.buildBinaryCall(e,t):this.buildRuleCall(e,t),this.decorate(r,t)}buildRuleCall(e,t){if("token"===t.name)throw new Error("Token can only be called as unary");const r=function(e,t,r){return function(){const n=e[t];if(void 0===n)throw new Error(`Could not find parser '${t}' in rule '${r}'`);return n}}(this.parsers,t.name,e);return new L(r,t.code)}buildBinaryCall(e,t){if("token"===t.parser)throw new Error("Token can only be called as unary");const r=this.combinators.binary[t.parser];if(void 0===r)throw new Error(`Could not find binary combinator: '${t.parser}' in rule '${e}'`);return new r([this.parserFor(e,t.lhs),this.parserFor(e,t.rhs)],t.code)}buildUnaryCall(e,t){if("token"===t.parser){if("RULE_CALL"!==t.arg.type)throw new Error("Tokens cannot call other rules or combinators");return new a(t.arg.name,t.code)}const r=this.combinators.unary[t.parser];if(void 0===r)throw new Error(`Could not find unary combinator: '${t.parser}' in rule '${e}'`);return new r(this.parserFor(e,t.arg),t.code)}decorate(e,t){let r=e;return!this.options.cache||e instanceof a||(r=new A(r,function(e){for(var t=0,r=0;t<e.length;t++)r=Math.imul(31,r)+e.charCodeAt(t)|0;return r}(JSON.stringify(t)))),this.options.debug&&(r=new y(r,this.options.logger)),r}buildLexer(e){if(void 0===e||"LEXER"!==e.type)throw new Error("Lexer was not defined in grammar. Define it or provide a custom lexer.");return new n(e.tokens)}}},{"../lexer/lexer":3,"./combinators/as":5,"./combinators/identity":6,"./combinators/many0":7,"./combinators/many1":8,"./combinators/optional":9,"./combinators/or":10,"./combinators/then":11,"./debuggable-parser":12,"./left-recursion-checker":14,"./memoizable-parser":15,"./result":17,"./token-list":18,"./token-parser":19}],17:[function(e,t,r){const n=e("./token-list");let s=null;t.exports=class e{constructor({success:e,remaining:t,matched:r}){this.success=e,this.remaining=t||new n([]),this.matched=r||null}get failed(){return!this.success}get succeeded(){return this.success}clone(){return new e({success:this.success,remaining:this.remaining,matched:this.matched})}static ok(t,r){return new e({success:!0,remaining:t,matched:r})}static fail(t,r){return r&&(null===s||s.remaining.index<t.index)&&(s={remaining:t,rule:r}),new e({success:!1,remaining:t})}static getMostAdvancedFailure(){return s}static clear(){s=null}}},{"./token-list":18}],18:[function(e,t,r){let n=0;t.exports=class e{constructor(e,t){const r=e.next();this.tokens=e,this.index=t||0,this.head=r.value,this.isDone=r.done,this._tail=null,this.objectId=n++}peek(e){return this.head.is(e)}isEmpty(){return this.done}get tail(){return null===this._tail&&(this._tail=new e(this.tokens,this.index+1)),this._tail}get cacheKey(){return this.objectId}}},{}],19:[function(e,t,r){const n=e("./result"),s=e("./evaluator");t.exports=class{constructor(e,t){this.tokenName=e,this.code=t,this._cacheKey=null}parse(e){return e.peek(this.tokenName)?n.ok(e.tail,this.code?s.eval(this.code,e.head.match):e.head.match):n.fail(e)}getParsers(){return[this]}toString(){return`[TOKEN ${this.tokenName}]`}}},{"./evaluator":13,"./result":17}],20:[function(e,t,r){const n=e("./parsers/parser"),s=e("./self-parse");t.exports=class{constructor(e,t={}){const r="string"==typeof e?s(e):e;this.parser=new n(r,t)}parse(e){if(!e)throw new Error("Input missing. Provide a string-able object.");const t=this.parser.parse(e.toString());if(t.succeeded){if(t.remaining.isEmpty()||t.remaining.head.is("EOF"))return t.matched;const{line:e,col:r}=t.remaining.head;throw new Error(`Syntax error line ${e}, column ${r}. Expected EOF, found <TOKEN ${t.remaining.head.name}: ${t.remaining.head.match}>`)}const r=this.parser.getMostAdvancedFailure(),{line:n,col:s}=r.remaining.head;throw new Error(`Syntax error line ${n}, column ${s}. Expected '${r.rule}', found <TOKEN ${r.remaining.head.name}: ${r.remaining.head.match}>`)}}},{"./parsers/parser":16,"./self-parse":21}],21:[function(e,t,r){const n=e("./grammar"),s=e("./parsers/parser");t.exports=function(e){const t=new s(n),r=t.parse(e);if(r.succeeded){if(r.remaining.isEmpty()||r.remaining.head.is("EOF"))return r.matched;const{line:e,col:t}=r.remaining.head;throw new Error(`Syntax error line ${e}, column ${t}. Expected EOF, found <TOKEN ${r.remaining.head.name}: ${r.remaining.head.match}>`)}const a=t.getMostAdvancedFailure(),{line:i,col:o}=a.remaining.head;throw new Error(`Syntax error line ${i}, column ${o}. Expected '${a.rule}', found <TOKEN ${a.remaining.head.name}: ${a.remaining.head.match}>`)}},{"./grammar":2,"./parsers/parser":16}],22:[function(e,t,r){t.exports=function(e){for(let t=0;t<e.length;){const r=e[t];Array.isArray(r)?r.length>0?(r.unshift(t,1),e.splice.apply(e,r),r.splice(0,2)):e.splice(t,1):t++}return e}},{}]},{},[1]);